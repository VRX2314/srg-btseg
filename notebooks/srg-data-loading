{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9524906,"sourceType":"datasetVersion","datasetId":5799941}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install nibabel numpy pandas opencv-python matplotlib seaborn","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-15T12:21:21.409668Z","iopub.execute_input":"2024-10-15T12:21:21.410070Z","iopub.status.idle":"2024-10-15T12:21:34.411085Z","shell.execute_reply.started":"2024-10-15T12:21:21.410030Z","shell.execute_reply":"2024-10-15T12:21:34.409886Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Requirement already satisfied: nibabel in /opt/conda/lib/python3.10/site-packages (5.2.1)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.3)\nRequirement already satisfied: opencv-python in /opt/conda/lib/python3.10/site-packages (4.10.0.84)\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (3.7.5)\nRequirement already satisfied: seaborn in /opt/conda/lib/python3.10/site-packages (0.12.2)\nRequirement already satisfied: packaging>=17 in /opt/conda/lib/python3.10/site-packages (from nibabel) (21.3)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.2.1)\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (4.53.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (10.3.0)\nRequirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib) (3.1.2)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport os\nimport torch\nimport nibabel as nib\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-10-15T12:46:43.949524Z","iopub.execute_input":"2024-10-15T12:46:43.949978Z","iopub.status.idle":"2024-10-15T12:46:43.954947Z","shell.execute_reply.started":"2024-10-15T12:46:43.949933Z","shell.execute_reply":"2024-10-15T12:46:43.953968Z"},"trusted":true},"execution_count":45,"outputs":[]},{"cell_type":"code","source":"class BratsTorchDataset:\n    \"\"\"\n    Dataset to handle and load nii.gz files from the BraTS dataset.\n\n    This class provides an interface to load and access images from the BraTS dataset,\n    including T2-weighted (t2w), segmentation (seg), T2-fluid (t2f), T1 contrast-enhanced (t1c),\n    and T1 non-contrast (t1n) images. The images are stored in a directory structure that \n    this class navigates to retrieve the required files.\n\n    Attributes:\n        base_path (str): The base directory path where the BraTS dataset is stored.\n        base_dir (np.ndarray): An array of subdirectory names within the base directory.\n    \"\"\"\n    \n    def __init__(self, base_path):\n        # TODO: Add built-in normalization\n        \"\"\"\n        Initializes the BratsTorchDataset with the specified base path.\n\n        Args:\n            base_path (str): The path to the directory containing BraTS dataset subdirectories.\n        \"\"\"\n        self.base_path = base_path\n        self.base_dir = np.array(os.listdir(base_path))\n    \n    def __len__(self):\n        \"\"\"\n        Returns the number of samples in the dataset.\n\n        Returns:\n            int: The total number of subdirectories (samples) in the dataset.\n        \"\"\"\n        return len(self.base_dir)\n    \n    def __getitem__(self, idx) -> list:\n        \"\"\"\n        Retrieves a list of images for a specific sample index.\n\n        Args:\n            idx (int): The index of the sample to retrieve. Can also be a tensor.\n\n        Returns:\n            list: A list containing:\n                - Path to Data (str)\n                - T2-weighted Image (np.ndarray)\n                - Segmentation Image (np.ndarray)\n                - T2-fluid Image (np.ndarray)\n                - T1 contrast-enhanced Image (np.ndarray)\n                - T1 non-contrast Image (np.ndarray)\n        \n        Raises:\n            IndexError: If the index is out of bounds.\n        \"\"\"\n        \n        if torch.is_tensor(idx):\n            idx = idx.tolist()\n        \n        full_path = os.path.join(self.base_path, self.base_dir[idx])\n        try:\n            img_list = self.__resolve_dir(full_path)\n        except Exception as e:\n            print(e)\n            print(\"Unknown Anomaly on\", full_path)\n        \n        return img_list\n    \n    def __resolve_dir(self, full_path):\n        \"\"\"\n        Resolves the directory to retrieve image files.\n\n        This method reads all files from a given directory, loading each image \n        file into a NumPy array. It distinguishes between directories and files \n        to ensure proper loading of images.\n\n        Args:\n            full_path (str): The full path to the sample's directory.\n\n        Returns:\n            list: A list containing the full path and NumPy arrays of loaded images.\n        \n        Note:\n            The first element of the returned list is the full path, followed by \n            NumPy arrays for each image type found in the directory.\n        \"\"\"\n        \n        # TODO: Add Concurrency Control\n        # Current Error: Unordered listing, better use Dict and name based mapping\n        full_path_dir = np.array(os.listdir(full_path))\n        img_list = [full_path]\n        \n        for file in full_path_dir:\n            file_path = os.path.join(full_path, file)\n            \n            if os.path.isdir(file_path):\n                file_content = os.path.join(file_path, os.listdir(file_path)[0])\n            else:\n                file_content = file_path\n            \n            img = nib.load(os.path.join(file_content)).get_fdata()\n            img_list.append(img)\n        \n        return img_list","metadata":{"execution":{"iopub.status.busy":"2024-10-15T13:00:35.324584Z","iopub.execute_input":"2024-10-15T13:00:35.325333Z","iopub.status.idle":"2024-10-15T13:00:35.336522Z","shell.execute_reply.started":"2024-10-15T13:00:35.325285Z","shell.execute_reply":"2024-10-15T13:00:35.335473Z"},"trusted":true},"execution_count":118,"outputs":[]},{"cell_type":"code","source":"data = BratsTorchDataset(\"/kaggle/input/brats2023-glioma/ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData\")","metadata":{"execution":{"iopub.status.busy":"2024-10-15T13:00:36.633421Z","iopub.execute_input":"2024-10-15T13:00:36.633824Z","iopub.status.idle":"2024-10-15T13:00:36.640276Z","shell.execute_reply.started":"2024-10-15T13:00:36.633783Z","shell.execute_reply":"2024-10-15T13:00:36.638787Z"},"trusted":true},"execution_count":119,"outputs":[]},{"cell_type":"code","source":"data[0][1]","metadata":{"execution":{"iopub.status.busy":"2024-10-15T13:00:37.672532Z","iopub.execute_input":"2024-10-15T13:00:37.672940Z","iopub.status.idle":"2024-10-15T13:00:37.815680Z","shell.execute_reply.started":"2024-10-15T13:00:37.672900Z","shell.execute_reply":"2024-10-15T13:00:37.814601Z"},"trusted":true},"execution_count":120,"outputs":[{"execution_count":120,"output_type":"execute_result","data":{"text/plain":"memmap([[[0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         ...,\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.]],\n\n        [[0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         ...,\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.]],\n\n        [[0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         ...,\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.]],\n\n        ...,\n\n        [[0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         ...,\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.]],\n\n        [[0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         ...,\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.]],\n\n        [[0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         ...,\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.],\n         [0., 0., 0., ..., 0., 0., 0.]]])"},"metadata":{}}]},{"cell_type":"code","source":"plt.imshow(data[12][1][110], cmap=\"gray\")","metadata":{"execution":{"iopub.status.busy":"2024-10-15T13:03:34.896825Z","iopub.execute_input":"2024-10-15T13:03:34.897763Z","iopub.status.idle":"2024-10-15T13:03:35.203826Z","shell.execute_reply.started":"2024-10-15T13:03:34.897716Z","shell.execute_reply":"2024-10-15T13:03:35.202589Z"},"trusted":true},"execution_count":132,"outputs":[{"execution_count":132,"output_type":"execute_result","data":{"text/plain":"<matplotlib.image.AxesImage at 0x7f154e082920>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]}]}